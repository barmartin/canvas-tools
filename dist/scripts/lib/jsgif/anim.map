{"version":3,"file":"anim.js","sources":["../../../../build/scripts/lib/jsgif/anim.js"],"names":["animDelayValue","value","Number","document","getElementById","toFixed","innerHTML","this","gifalizer","getAnimScaleFactor","autosaveElements","getElementsByName","autosaveValue","i","length","checked","delay","scale","animation_parts","Array","paintedCanvases","worker","Worker","onmessage","e","frame_index","data","frame_data","console","log","j","binary_gif","join","data_url","window","btoa","gifItem","Image","src","thumbs","hasChildNodes","removeChild","lastChild","appendChild","imageItems","isloaded","index","onload","scratchCanvas","createElement","width","comicPane","height","scratchCanvasContext","getContext","fillStyle","fillRect","drawImage","imdata","getImageData","postMessage","frame_length","imageData"],"mappings":"AAIA,QAASA,kBAER,GAAIC,GAAQ,GAAIC,QAAOC,SAASC,eAAe,aAAaH,MAAM,IAClEA,GAAMI,QAAQ,GACdF,SAASC,eAAe,gBAAgBE,UAAYL,EAErDD,iBACAO,KAAKP,eAAiBA,eACtBO,KAAKC,UAAY,WAEhB,QAASC,KAIR,IAAK,GAFDC,GAAmBP,SAASQ,kBAAkB,aAC9CC,EAAgB,IACXC,EAAE,EAAGA,EAAIH,EAAiBI,OAAQD,IAE1C,GAAIH,EAAiBG,GAAGE,QACxB,CACCH,EAAgBF,EAAiBG,GAAGZ,KACpC,OAGF,MAAoB,KAAjBW,EAEK,EAEY,KAAjBA,EAEK,EAIA,EAIT,GAAII,GAAQb,SAASC,eAAe,aAAaH,MAC7CgB,EAAQR,IAERS,EAAkB,GAAIC,OAAMC,gBAAgBN,QAE5CO,EAAS,GAAIC,QAAO,gBAOxBD,GAAOE,UAAY,SAASC,GAG3B,GAAIC,GAAcD,EAAEE,KAAkB,YAClCC,EAAaH,EAAEE,KAAiB,UACpCR,GAAgBO,GAAeE,EAC/BC,QAAQC,IAAIJ,EACZ,KAAI,GAAIK,GAAI,EAAGA,EAAIV,gBAAgBN,OAAQgB,IAE1C,GAAyB,MAAtBZ,EAAgBY,GAElB,MAGFF,SAAQC,IAAI,SAEZ,IAAIE,GAAab,EAAgBc,KAAK,IAClCC,EAAW,yBAAyBC,OAAOC,KAAKJ,GAEhDK,EAAU,GAAIC,MAClBD,GAAQE,IAAML,CAId,KAHA,GAAIM,GAASpC,SAASC,eAAe,gBAG/BmC,EAAOC,iBAEZD,EAAOE,YAAYF,EAAOG,UAE3BvC,UAASC,eAAe,gBAAgBuC,YAAYP,GAKrD,KAAI,GAFAQ,GAAa,GAAIzB,OAEbN,EAAI,EAAGA,EAAIO,gBAAgBN,OAAQD,IAE1C+B,EAAW/B,GAAK,GAAIwB,OACpBO,EAAW/B,GAAGyB,IAAMlB,gBAAgBP,GACpC+B,EAAW/B,GAAGgC,UAAW,EACzBD,EAAW/B,GAAGiC,MAAQjC,EACtB+B,EAAW/B,GAAGkC,OAAS,WAEtB,GAAIC,GAAgB7C,SAAS8C,cAAc,SAC3CD,GAAcE,MAAQC,UAAUD,MAAMjC,EACtC+B,EAAcI,OAASD,UAAUC,OAAOnC,CACxC,IAAIoC,GAAuBL,EAAcM,WAAW,KACpDD,GAAqBE,UAAY,UACjCF,EAAqBG,SAAS,EAAE,EAAER,EAAcE,MAAOF,EAAcI,QACrEC,EAAqBI,UAAUlD,KAAK,EAAE,EAAEyC,EAAcE,MAAMF,EAAcI,OAC1E,IAAIM,GAASL,EAAqBM,aAAa,EAAE,EAAGX,EAAcE,MAAOF,EAAcI,QAAQ1B,IAC/FE,SAAQC,IAAItB,KAAKuC,OACjBzB,EAAOuC,aAAanC,YAAelB,KAAKuC,MAAO9B,MAASA,EAAO6C,aAAezC,gBAAgBN,OAAO,EAAGsC,OAASJ,EAAcI,OAAQF,MAAQF,EAAcE,MAAOY,UAAYJ","sourcesContent":["//This Demonstrates calling the animWorker.js web worker, allowing for non-blocking\n//Gif building.\n\n\nfunction animDelayValue() //Gets a user defined frame delay from user input (dom element), displays current value on dom\n{\n\tvar value = new Number(document.getElementById(\"animDelay\").value/1000);\n\tvalue.toFixed(2);\n\tdocument.getElementById(\"animDelayVal\").innerHTML = value;\n}\nanimDelayValue(); //initialize delay value display \nthis.animDelayValue = animDelayValue;\t//make animDelayValue global\nthis.gifalizer = function() //function, called from DOM to build gif.\n{\n\tfunction getAnimScaleFactor()\n\t{\n\t\tvar autosaveElements = document.getElementsByName(\"animScale\"); //DOM widget to set scale factor to 100%, 50% or 25%\n\t\tvar autosaveValue = \"4\"\n\t\tfor (var i=0; i < autosaveElements.length; i++)\n\t\t{\n\t\t\tif (autosaveElements[i].checked)\n\t\t\t{\n\t\t\t\tautosaveValue = autosaveElements[i].value;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(autosaveValue == \"1\")\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\tif(autosaveValue == \"2\")\n\t\t{\n\t\t\treturn 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 4;\n\t\t}\n\t}\n\t\n\tvar delay = document.getElementById(\"animDelay\").value;\n\tvar scale = getAnimScaleFactor();\n\t\n\tvar animation_parts = new Array(paintedCanvases.length);\n\n\tvar worker = new Worker('animWorker.js');\n\t//worker.onmessage = function(e)\n\t//{\n\t//\tconsole.log(e.data);\n\t//}\n\t\n\t//call web worker. \n\tworker.onmessage = function(e)\n\t{\n\t\t//handle stuff, like get the frame_index\n\t\tvar frame_index = e.data[\"frame_index\"];\n\t\tvar frame_data = e.data[\"frame_data\"];\n\t\tanimation_parts[frame_index] = frame_data;\n\t\tconsole.log(frame_index);\n\t\tfor(var j = 0; j < paintedCanvases.length; j++)\n\t\t{\n\t\t\tif(animation_parts[j] == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tconsole.log(\"append\");\n\t\t//check when everything else is done and then do animation_parts.join('') and have fun\n\t\tvar binary_gif = animation_parts.join('');\n\t\tvar data_url = 'data:image/gif;base64,'+window.btoa(binary_gif);\n\t\t\n\t\tvar gifItem = new Image();\n\t\tgifItem.src = data_url;\n\t\tvar thumbs = document.getElementById(\"gifContainer\");\n\t\t\n\t\t//nuke all child nodes!\n\t\twhile(thumbs.hasChildNodes())\n\t\t{\n\t\t\tthumbs.removeChild(thumbs.lastChild);\n\t\t}\n\t\tdocument.getElementById(\"gifContainer\").appendChild(gifItem);\t\n\t}\n\n\tvar imageItems = new Array(); //hacky way to ensure that an arbitrary number of onload events occur.\n\t//paintedCanvases is an array of canvas data generated by a canvas toDataURL calls elsewhere in the parent scope. Replicate this how you wish.\n\tfor(var i = 0; i < paintedCanvases.length; i++)\n\t{\n\t\timageItems[i] = new Image();\n\t\timageItems[i].src = paintedCanvases[i];\n\t\timageItems[i].isloaded = false;\n\t\timageItems[i].index = i;\n\t\timageItems[i].onload = function()\n\t\t{\n\t\t\tvar scratchCanvas = document.createElement(\"canvas\"); \n\t\t\tscratchCanvas.width = comicPane.width/scale;\n\t\t\tscratchCanvas.height = comicPane.height/scale;\n\t\t\tvar scratchCanvasContext = scratchCanvas.getContext(\"2d\");\n\t\t\tscratchCanvasContext.fillStyle = \"#FFFFFF\";\n\t\t\tscratchCanvasContext.fillRect(0,0,scratchCanvas.width, scratchCanvas.height);\n\t\t\tscratchCanvasContext.drawImage(this,0,0,scratchCanvas.width,scratchCanvas.height);\n\t\t\tvar imdata = scratchCanvasContext.getImageData(0,0, scratchCanvas.width, scratchCanvas.height).data;\n\t\t\tconsole.log(this.index);\n\t\t\tworker.postMessage({\"frame_index\": this.index, \"delay\": delay, \"frame_length\":paintedCanvases.length-1, \"height\":scratchCanvas.height, \"width\":scratchCanvas.width, \"imageData\":imdata}); //imarray.join(',')\n\n\t\t}\n\t}\n}"]}