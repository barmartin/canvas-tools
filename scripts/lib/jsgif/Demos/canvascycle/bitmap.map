{"version":3,"file":"bitmap.js","sources":["../../../../../../build/scripts/lib/jsgif/Demos/canvascycle/bitmap.js"],"names":["Class","create","width","height","pixels","palette","drawCount","optPixels","__construct","img","this","Palette","colors","cycles","optimize","optColors","idx","len","length","cycle","rate","idy","low","high","x","y","j","i","xmax","ymax","render","imageData","getRawTransformedColors","data","clr"],"mappings":"AAIAA,MAAMC,OAAQ,UAEbC,MAAO,EACPC,OAAQ,EACRC,OAAQ,KACRC,QAAS,KACTC,UAAW,EACXC,UAAW,KAEXC,YAAa,SAASC,GAErBC,KAAKR,MAAQO,EAAIP,MACjBQ,KAAKP,OAASM,EAAIN,OAClBO,KAAKL,QAAU,GAAIM,SAASF,EAAIG,OAAQH,EAAII,QAC5CH,KAAKN,OAASK,EAAIL,QAGnBU,SAAU,WAGT,IAAK,GADDC,MACKC,EAAM,EAAS,IAANA,EAAWA,IAAOD,EAAUC,GAAO,CAIrD,KAAK,GADDH,GAASH,KAAKL,QAAQQ,OACjBG,EAAM,EAAGC,EAAMJ,EAAOK,OAAcD,EAAND,EAAWA,IAAO,CACxD,GAAIG,GAAQN,EAAOG,EACnB,IAAIG,EAAMC,KAET,IAAKC,IAAMF,EAAMG,IAAKD,KAAOF,EAAMI,KAAMF,MACxCN,EAAUM,KAAO,EAMpB,GAIIG,GAAGC,EAJHlB,EAAYG,KAAKH,aACjBH,EAASM,KAAKN,OACdsB,EAAI,EACJC,EAAI,EAEJC,EAAOlB,KAAKR,MAAO2B,EAAOnB,KAAKP,MAEnC,KAAKsB,EAAI,EAAOI,EAAJJ,EAAUA,IACrB,IAAKD,EAAI,EAAOI,EAAJJ,EAAUA,IACjBT,EAAUX,EAAOsB,MAAKnB,EAAUoB,KAAOD,GAC3CA,KAKHI,OAAQ,SAASC,EAAWjB,GAE3B,GAAIF,GAASF,KAAKL,QAAQ2B,0BACtBC,EAAOF,EAAUE,KACjB7B,EAASM,KAAKN,MAElB,IAAIU,GAAYJ,KAAKJ,WAAaI,KAAKH,UAKtC,IAAK,GAFDoB,GAAGD,EAAGQ,EADN3B,EAAYG,KAAKH,UAGZS,EAAM,EAAGC,EAAMV,EAAUW,OAAcD,EAAND,EAAWA,IACpDU,EAAInB,EAAUS,GACdkB,EAAMtB,EAAQR,EAAOsB,IACrBC,EAAQ,EAAJD,EACJO,EAAKN,EAAI,GAAKO,EAAI,GACfD,EAAKN,EAAI,GAAKO,EAAI,GACfD,EAAKN,EAAI,GAAKO,EAAI,GAClBD,EAAKN,EAAI,GAAK,QAGjB,CAEJ,GAEIH,GAAGC,EAAGS,EAFNP,EAAI,EACJD,EAAI,EAEJE,EAAOlB,KAAKR,MAAO2B,EAAOnB,KAAKP,MAEnC,KAAKsB,EAAI,EAAOI,EAAJJ,EAAUA,IACrB,IAAKD,EAAI,EAAOI,EAAJJ,EAAUA,IACrBU,EAAMtB,EAAQR,EAAOsB,IACrBO,EAAKN,EAAI,GAAKO,EAAI,GACfD,EAAKN,EAAI,GAAKO,EAAI,GACfD,EAAKN,EAAI,GAAKO,EAAI,GAClBD,EAAKN,EAAI,GAAK,IACpBA,GAAK,EACLD,IAKHhB,KAAKJ","sourcesContent":["// 8-bit Bitmap for use in HTML5 Canvas\n// Copyright (c) 2010 Joseph Huckaby.\n// Released under the LGPL v3.0: http://www.opensource.org/licenses/lgpl-3.0.html\n\nClass.create( 'Bitmap', {\n\t\n\twidth: 0,\n\theight: 0,\n\tpixels: null,\n\tpalette: null,\n\tdrawCount: 0,\n\toptPixels: null,\n\t\n\t__construct: function(img) {\n\t\t// class constructor\n\t\tthis.width = img.width;\n\t\tthis.height = img.height;\n\t\tthis.palette = new Palette( img.colors, img.cycles );\n\t\tthis.pixels = img.pixels;\n\t},\n\t\n\toptimize: function() {\n\t\t// prepare bitmap for optimized rendering (only refresh pixels that changed)\n\t\tvar optColors = [];\n\t\tfor (var idx = 0; idx < 256; idx++) optColors[idx] = 0;\n\t\t\n\t\t// mark animated colors in palette\n\t\tvar cycles = this.palette.cycles;\n\t\tfor (var idx = 0, len = cycles.length; idx < len; idx++) {\n\t\t\tvar cycle = cycles[idx];\n\t\t\tif (cycle.rate) {\n\t\t\t\t// cycle is animated\n\t\t\t\tfor (idy = cycle.low; idy <= cycle.high; idy++) {\n\t\t\t\t\toptColors[idy] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// create array of pixel offsets which are animated\n\t\tvar optPixels = this.optPixels = [];\n\t\tvar pixels = this.pixels;\n\t\tvar j = 0;\n\t\tvar i = 0;\n\t\tvar x, y;\n\t\tvar xmax = this.width, ymax = this.height;\n\t\t\n\t\tfor (y = 0; y < ymax; y++) {\n\t\t\tfor (x = 0; x < xmax; x++) {\n\t\t\t\tif (optColors[pixels[j]]) optPixels[i++] = j;\n\t\t\t\tj++;\n\t\t\t} // x loop\n\t\t} // y loop\n\t},\n\t\n\trender: function(imageData, optimize) {\n\t\t// render pixels into canvas imageData object\n\t\tvar colors = this.palette.getRawTransformedColors();\n\t\tvar data = imageData.data;\n\t\tvar pixels = this.pixels;\n\t\t\n\t\tif (optimize && this.drawCount && this.optPixels) {\n\t\t\t// only redraw pixels that are part of animated cycles\n\t\t\tvar optPixels = this.optPixels;\n\t\t\tvar i, j, clr;\n\t\t\t\n\t\t\tfor (var idx = 0, len = optPixels.length; idx < len; idx++) {\n\t\t\t\tj = optPixels[idx];\n\t\t\t\tclr = colors[ pixels[j] ];\n\t\t\t\ti = j * 4;\n\t\t\t\tdata[i + 0] = clr[0]; // red\n\t\t\t    data[i + 1] = clr[1]; // green\n\t\t        data[i + 2] = clr[2]; // blue\n\t\t        data[i + 3] = 255; // alpha\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// draw every single pixel\n\t\t\tvar i = 0;\n\t\t\tvar j = 0;\n\t\t\tvar x, y, clr;\n\t\t\tvar xmax = this.width, ymax = this.height;\n\t\t\t\n\t\t\tfor (y = 0; y < ymax; y++) {\n\t\t\t\tfor (x = 0; x < xmax; x++) {\n\t\t\t\t\tclr = colors[ pixels[j] ];\n\t\t\t\t\tdata[i + 0] = clr[0]; // red\n\t\t\t\t    data[i + 1] = clr[1]; // green\n\t\t\t        data[i + 2] = clr[2]; // blue\n\t\t\t        data[i + 3] = 255; // alpha\n\t\t\t\t\ti += 4;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.drawCount++;\n\t}\n\t\n} );\n"]}